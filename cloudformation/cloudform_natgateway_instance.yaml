Parameters:
  Tag:
    Type: String
    Default: "vpcx"
  pNatInstanceType:
    Type: String
    Default: "t3.micro"
  SshKeyParameter:
    Description: SSH Keypair to login to the instance
    Type: AWS::EC2::KeyPair::KeyName
  AvailabilityZone:
    Type: String
    Default: "us-east-1a"
  amazon2AMIImageId:
    Type: String
    Default: "ami-0403fbe59b91a6b7a"
  ubuntuImageId:
    Type: String
    Default: "ami-0574da719dca65348"
  cidrPublic:
    Type: String
    Default: "10.0.0.0/24"
  cidrPrivate:
    Type: String
    Default: "10.0.1.0/24"
  cidrVPC:
    Type: String
    Default: "10.0.0.0/16"

Resources:
  #Network definition
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref cidrVPC
      InstanceTenancy: "default"
      Tags:
        - Key: "Name"
          Value: !Ref Tag

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  #Public Subnet
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Ref AvailabilityZone
      VpcId: !Ref "VPC"
      CidrBlock: !Ref cidrPublic

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  InternetRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable

  #Private subnet
  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      VpcId: !Ref VPC
      CidrBlock: !Ref cidrPrivate

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  PrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet

  #NAT GATEWAY
  EIP:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  Nat:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId: !GetAtt EIP.AllocationId
      SubnetId: !Ref PublicSubnet

  NatRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref Nat
      RouteTableId: !Ref PrivateRouteTable

  #BASTION
  BastionSercurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the nat instance
      SecurityGroupIngress:
        #ssh access
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp

  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo -i
          sudo yum update -y
          sudo yum upgrade -y
      InstanceType: !Ref pNatInstanceType
      ImageId: !Ref amazon2AMIImageId
      KeyName: !Ref SshKeyParameter
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref BastionSercurityGroup
          SubnetId: !Ref PublicSubnet
      Tags:
        - Key: "Name"
          Value: "BastionInstance"

  #PUBLIC SITE
  PublicSercurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the nat instance
      SecurityGroupIngress:
        # http & https trafic
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        #ssh access
        - CidrIp: !Ref cidrVPC
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp

  PublicInstance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install jq unzip build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev wget gnupg python3 curl gnupg lsb-release -y
          echo "deb http://security.ubuntu.com/ubuntu focal-security main" | sudo tee /etc/apt/sources.list.d/focal-security.list
          sudo apt-get update
          sudo apt install libssl1.1 -y
          sudo apt install -y software-properties-common gnupg apt-transport-https ca-certificates
          wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list
          sudo apt-get update
          sudo apt install mongodb-org -y
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
          sudo chmod 666 /var/run/docker.sock
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          myregion=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone | sed 's/\(.*\)[a-z]/\1/')
          repositoryUri=$(aws ecr describe-repositories --repository-name fastapi_aws | jq -r ".repositories[0].repositoryUri")
          aws ecr get-login-password --region $myregion | sudo docker login --username AWS --password-stdin $repositoryUri
          sudo docker pull $repositoryUri:v1
          sudo docker run -d -p 80:80 --name api $repositoryUri:v1
      InstanceType: !Ref pNatInstanceType
      ImageId: !Ref ubuntuImageId
      KeyName: !Ref SshKeyParameter
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref PublicSercurityGroup
          SubnetId: !Ref PublicSubnet
      Tags:
        - Key: "Name"
          Value: "SiteInstance"

  #PrivateInstance
  PrivateSercurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the nat instance
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        #ssh access
        - CidrIp: !Ref cidrVPC
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp
        - CidrIp: !Ref cidrVPC
          FromPort: 27017
          ToPort: 27018
          IpProtocol: tcp

  SuperPrivateSercurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the nat instance
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        # http & https trafic
        - CidrIp: !Ref cidrPrivate
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: !Ref cidrPrivate
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp
        #ssh access
        - CidrIp: !Ref cidrPrivate
          FromPort: 22
          ToPort: 22
          IpProtocol: tcp

  PrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install build-essential zlib1g-dev libncurses5-dev libgdbm-dev libnss3-dev libssl-dev libreadline-dev libffi-dev wget gnupg python3 curl gnupg lsb-release -y
          echo "deb http://security.ubuntu.com/ubuntu focal-security main" | sudo tee /etc/apt/sources.list.d/focal-security.list
          sudo apt-get update
          sudo apt install libssl1.1 -y
          sudo apt install -y software-properties-common gnupg apt-transport-https ca-certificates
          wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add -
          echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-5.0.list
          sudo apt-get update
          sudo apt install mongodb-org -y
          sudo systemctl start mongod.service
          sudo systemctl enable mongod
      InstanceType: !Ref pNatInstanceType
      ImageId: !Ref ubuntuImageId
      KeyName: !Ref SshKeyParameter
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref PrivateSercurityGroup
          SubnetId: !Ref PrivateSubnet
      Tags:
        - Key: "Name"
          Value: "PrivateInstance"

  SuperPrivateInstance:
    Type: AWS::EC2::Instance
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo -i
          sudo yum update -y
          sudo yum upgrade -y
      InstanceType: !Ref pNatInstanceType
      ImageId: !Ref amazon2AMIImageId
      KeyName: !Ref SshKeyParameter
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - !Ref SuperPrivateSercurityGroup
          SubnetId: !Ref PrivateSubnet
      Tags:
        - Key: "Name"
          Value: "SuperPrivateInstance"

  Ec2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
        Version: 2012-10-17
      Path: /
      Policies:
        - PolicyName: Ec2Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ssm:GetParameters"
                  - "ssm:GetParameter"
                  - "ecr:*"
                Resource: "*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: site-ec2-instance-profile
      Path: /
      Roles:
        - !Ref Ec2Role

Outputs:
  VpcId:
    Description: The VPC ID
    Value: !Ref VPC
